version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  slack: circleci/slack@4.4.4
  go: circleci/go@1.7.0
  cypress: cypress-io/cypress@1.29.0

executors:
  machine_no_dlc:
    machine:
      image: ubuntu-2004:202107-02
  machine_with_dlc:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
  go_docker:
    docker:
      - image: cimg/go:1.17.1
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
  go_docker_and_mysql:
      docker:
        - image: cimg/go:1.17.1
          auth: 
            username: $DOCKER_USERNAME
            password: $DOCKER_PASS
        - image: circleci/mysql:8.0.3
          auth: 
            username: $DOCKER_USERNAME
            password: $DOCKER_PASS
          environment: 
            MYSQL_ROOT_PASSWORD: snippet_root_pass
            MYSQL_DATABASE: snippetbox
            MYSQL_USER: test_web
            MYSQL_PASSWORD: testing123
  cypress_docker:
    docker:
      - image: cypress/base:14.16.0
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
        environment:
          TERM: xterm
    working_directory: ~/app

commands:
  build_container:
    description: Start container and verify
    steps:
      - run:
          name: Build container
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose build
  start_app_and_verify:
    description: Start app and verify
    steps:
      - run:
          name: Start app
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose up -d
      - run: 
          name: Verify database up
          command: |
            until docker inspect -f {{.State.Running}} database
            do sleep 10
            echo waiting for the database...
            done


jobs:
  build:
    executor: machine_with_dlc
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
            - go-mod-v1-{{ checksum "go.mod" }}-
            - go-mod-v1-
      - build_container

  lint:
    executor: go_docker
    steps:
      - checkout
      - run:
          name: Lint the Go cmd/web
          command: gofmt -d ./cmd/web
      - run:
          name: Lint the Go pkg/
          command: gofmt -d ./pkg
  unit-tests:
    executor: go_docker_and_mysql
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
            - go-mod-v1-{{ checksum "go.mod" }}-
            - go-mod-v1-
      - run: mkdir -p /tmp/code_coverage/
      - run: mkdir -p /tmp/test-results/
      - run: |
          sudo apt-get update
          sudo apt-get install default-mysql-client
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Create test mysql table and user
          command: |
            mysql -h 127.0.0.1 --ssl-mode=DISABLED --user=root --password=snippet_root_pass --execute="CREATE DATABASE test_snippetbox CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            mysql -h 127.0.0.1 --ssl-mode=DISABLED --user=root --password=snippet_root_pass --execute="CREATE USER 'test_web'@'localhost'; \
            GRANT CREATE, DROP, ALTER, INDEX, SELECT, INSERT, UPDATE, DELETE ON test_snippetbox.* TO 'test_web'@'localhost'; \
            ALTER USER 'test_web'@'localhost' IDENTIFIED BY 'testing123';"
      - run:
          name: Run Go unit tests with coverage
          command: |
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile /tmp/test-results/unit-tests-report.xml -- -coverprofile=/tmp/code_coverage/profile.out ./... $PACKAGE_NAMES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/code_coverage/profile.out
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "./"
  go-static-analyzer:
    executor: go_docker
    steps:
      - checkout
      - run:
          name: Run static analyzer on cmd/web
          command: go vet ./cmd/web
      - run:
          name: Run static analyzer on pgk
          command: |
            go vet ./pkg/forms
            go vet ./pkg/models
            go vet ./pkg/models/mock
            go vet ./pkg/models/mysql
  cypress-tests:
    executor: machine_with_dlc
    steps:
      - checkout
      - run:
          name: Start app
          command: |
            set -x
            docker-compose up -d
      - run:
          name: Waiting for app to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 4000 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for app && exit 1
      - run: docker run -it -v $PWD:/e2e -w /e2e cypress/included:3.2.0
      - store_artifacts:
          path: ./cypress/videos
      - store_artifacts:
          path: ./cypress/screenshots
  deploy:
    executor: machine_no_dlc
    steps:
      # - push-image:
      #   - setup-remote-docker
      #   - repo: #todo create context
      - run: echo I'm going to deploy I promise

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      # - lint
      # # - code-coverage
      # - go-static-analyzer
      # - build
      #- unit-tests
          # requires:
          #   - build
          #   - lint
          #   - go-static-analyzer
      #     requires:
      #       - build
      #       - lint
      #       - go-static-analyzer
      - cypress-tests
      # - deploy:
      #     requires:
      #       - unit-tests
      #       - cypress-tests
      #     filters:
      #       branches:
      #         only:
      #           - main