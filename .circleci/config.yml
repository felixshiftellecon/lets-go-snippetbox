version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  slack: circleci/slack@4.4.4
  go: circleci/go@1.7.0
  cypress: cypress-io/cypress@1.29.0

executors:
  machine_with_dlc:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
  go_docker:
    docker:
      - image: cimg/go:1.17.1
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
  hadolint:
    docker:
      - image: hadolint/hadolint:2.7.0-alpine
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
  go_docker_and_mysql:
      docker:
        - image: cimg/go:1.17.1
          auth: 
            username: $DOCKER_USERNAME
            password: $DOCKER_PASS
        - image: circleci/mysql:8.0.3
          auth: 
            username: $DOCKER_USERNAME
            password: $DOCKER_PASS
          environment: 
            MYSQL_ROOT_PASSWORD: snippet_root_pass
            MYSQL_DATABASE: snippetbox
            MYSQL_USER: test_web
            MYSQL_PASSWORD: testing123
  cypress_docker:
    docker:
      - image: cypress/base:14.16.0
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
        environment:
          TERM: xterm
    working_directory: ~/app

commands:
  build_container:
    description: Start container and verify
    steps:
      - run:
          name: Build container
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose build

  start_app_and_verify:
    description: Start app and verify
    steps:
      - run:
          name: Start app
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose up -d
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for snippetbox
          command: |
                  sleep 10
                  dockerize -wait tcp://localhost:4000 -timeout 1m

  restore_go_cache:
    description: Restore the go cache
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
            - go-mod-v1-{{ checksum "go.mod" }}-
            - go-mod-v1-


jobs:
  go_lint_and_analyze:
    executor: go_docker
    steps:
      - checkout
      - run:
          name: Lint the Go cmd/web
          command: gofmt -d ./cmd/web
      - run:
          name: Lint the Go pkg/
          command: gofmt -d ./pkg
      - run:
          name: Run static analyzer on cmd/web
          command: go vet ./cmd/web
      - run:
          name: Run static analyzer on pgk
          command: |
            go vet ./pkg/forms
            go vet ./pkg/models
            go vet ./pkg/models/mock
            go vet ./pkg/models/mysql

  lint_docker_compose:
    executor: go_docker
    steps:
      - checkout
      - run:
          name: Install Docker compose
          command: sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run:
          name: Lint Docker-Compose config
          command: docker-compose config -q

  lint_dockerfiles:
    executor: hadolint
    steps:
      - checkout
      - run:
          name: Lint Dockerfiles
          command: |
            hadolint ./docker/app/Dockerfile --ignore DL3003 --ignore DL3059
            hadolint ./docker/db/Dockerfile --ignore DL3003 --ignore DL3059


  unit-tests:
    executor: go_docker_and_mysql
    parallelism: 2
    working_directory: ~/project
    environment:
      TEST_RESULTS: /tmp/test-results
      CODE_COVERAGE: /tmp/code_coverage
    steps:
      - checkout
      - restore_go_cache
      - run: mkdir -p /tmp/code_coverage/
      - run: mkdir -p $TEST_RESULTS
      - run: |
          sudo apt-get update
          sudo apt-get install default-mysql-client
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Create test mysql table and user
          command: |
            mysql -h 127.0.0.1 --ssl-mode=DISABLED --user=root --password=snippet_root_pass --execute="CREATE DATABASE test_snippetbox CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            mysql -h 127.0.0.1 --ssl-mode=DISABLED --user=root --password=snippet_root_pass --execute="CREATE USER 'test_web'@'localhost'; \
            GRANT CREATE, DROP, ALTER, INDEX, SELECT, INSERT, UPDATE, DELETE ON test_snippetbox.* TO 'test_web'@'localhost'; \
            ALTER USER 'test_web'@'localhost' IDENTIFIED BY 'testing123';"
      - run:
          name: Run Go unit tests with coverage
          command: |
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/unit-tests-report.xml -- -coverprofile=${CODE_COVERAGE}/profile.out ./... $PACKAGE_NAMES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/code_coverage/profile.out
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
          paths:
            - "./"

  build:
    executor: machine_with_dlc
    steps:
      - checkout
      - restore_go_cache
      - build_container

  # cypress-tests:
  #   executor: machine_with_dlc
  #   steps:
  #     - checkout
  #     - start_app_and_verify
  #     - restore_cache:
  #         keys:
  #           - cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
  #           - cypress-v2{{ .Branch }}
  #           - cypress-v2
  #     - run: 
  #         name: Run Cypress tests
  #         command: docker run --network=container:snippetbox -it -v $PWD:/e2e -w /e2e cypress/included:3.2.0
  #     - save_cache:
  #         key: cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
  #         paths:
  #           - ~/.npm
  #           - ~/.cache
  #     - store_artifacts:
  #         path: ./cypress/videos
  #     - store_artifacts:
  #         path: ./cypress/screenshots

  deploy:
    executor: machine_with_dlc
    steps:
      - checkout
      - restore_go_cache
      - run:
          name: Build app and db
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose build
      - run:
          name: Push images to dockerhub
          command: docker-compose push


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - go_lint_and_analyze
      - lint_docker_compose
      - lint_dockerfiles
      - build:
          requires:
              - go_lint_and_analyze
              - lint_docker_compose
              - lint_dockerfiles
      - unit-tests:
          requires:
            - go_lint_and_analyze
            - lint_docker_compose
            - lint_dockerfiles
      - cypress/run:
          name: cypress-test
          executor: machine_with_dlc
          parallel: true
          parallelism: 2
          requires:
            - build
            - unit-tests
          pre-steps:
            - checkout
            - run:
                'circleci tests glob "cypress/integration/*" | circleci tests split >
                /tmp/tests.txt'
            - start_app_and_verify
            - restore_cache:
                keys:
                  - cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
                  - cypress-v2{{ .Branch }}
                  - cypress-v2
            - run: yarn cypress install
            - save_cache:
                key: cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
                paths:
                  - ~/.npm
                  - ~/.cache
          post-steps:
            - store_test_results:
                path: test-results
          no-workspace: true
          yarn: true
          record: true
          start: yarn start
          command: yarn cypress run --spec $(cat /tmp/tests.txt)
      - deploy:
          requires:
            - cypress-tests
          # filters:
          #   branches:
          #     only:
          #       - main